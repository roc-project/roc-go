// WARNING: This file has automatically been generated on Sun, 03 Nov 2019 20:29:42 CET.
// Code generated by https://git.io/c-for-go. DO NOT EDIT.

package roc

/*
#cgo CFLAGS: -I"../include"
#cgo LDFLAGS: -lroc
#include "../include/roc/address.h"
#include "../include/roc/config.h"
#include "../include/roc/context.h"
#include "../include/roc/frame.h"
#include "../include/roc/log.h"
#include "../include/roc/platform.h"
#include "../include/roc/receiver.h"
#include "../include/roc/sender.h"
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import "unsafe"

// addressInit function as declared in roc/address.h:86
func addressInit(address *Address, family Family, ip string, port int32) int32 {
	caddress, _ := address.PassRef()
	cfamily, _ := (C.roc_family)(family), cgoAllocsUnknown
	cip, _ := unpackPCharString(ip)
	cport, _ := (C.int)(port), cgoAllocsUnknown
	__ret := C.roc_address_init(caddress, cfamily, cip, cport)
	__v := (int32)(__ret)
	return __v
}

// addressFamily function as declared in roc/address.h:97
func addressFamily(address *Address) Family {
	caddress, _ := address.PassRef()
	__ret := C.roc_address_family(caddress)
	__v := (Family)(__ret)
	return __v
}

// addressIp function as declared in roc/address.h:116
func addressIp(address *Address, buf []byte) string {
	caddress, _ := address.PassRef()
	cbuf, _ := (*C.char)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&buf)).Data)), cgoAllocsUnknown
	cbufsz, _ := (C.size_t)(len(buf)), cgoAllocsUnknown
	__ret := C.roc_address_ip(caddress, cbuf, cbufsz)
	__v := packPCharString(__ret)
	return __v
}

// addressPort function as declared in roc/address.h:127
func addressPort(address *Address) int32 {
	caddress, _ := address.PassRef()
	__ret := C.roc_address_port(caddress)
	__v := (int32)(__ret)
	return __v
}

// contextOpen function as declared in roc/context.h:55
func contextOpen(config *ContextConfig) *Context {
	cconfig, _ := config.PassRef()
	__ret := C.roc_context_open(cconfig)
	__v := *(**Context)(unsafe.Pointer(&__ret))
	return __v
}

// contextClose function as declared in roc/context.h:72
func contextClose(context *Context) int32 {
	ccontext, _ := (*C.roc_context)(unsafe.Pointer(context)), cgoAllocsUnknown
	__ret := C.roc_context_close(ccontext)
	__v := (int32)(__ret)
	return __v
}

// logSetLevel function as declared in roc/log.h:76
func logSetLevelImpl(level LogLevel) {
	clevel, _ := (C.roc_log_level)(level), cgoAllocsUnknown
	C.roc_log_set_level(clevel)
}

// logSetHandler function as declared in roc/log.h:90
func logSetHandlerImpl(handler LogHandler) {
	chandler, _ := handler.PassValue()
	C.roc_log_set_handler(chandler)
}

// receiverOpen function as declared in roc/receiver.h:132
func receiverOpen(context *Context, config *ReceiverConfig) *Receiver {
	ccontext, _ := (*C.roc_context)(unsafe.Pointer(context)), cgoAllocsUnknown
	cconfig, _ := config.PassRef()
	__ret := C.roc_receiver_open(ccontext, cconfig)
	__v := *(**Receiver)(unsafe.Pointer(&__ret))
	return __v
}

// receiverBind function as declared in roc/receiver.h:156
func receiverBind(receiver *Receiver, kind PortType, proto Protocol, address *Address) int32 {
	creceiver, _ := (*C.roc_receiver)(unsafe.Pointer(receiver)), cgoAllocsUnknown
	ckind, _ := (C.roc_port_type)(kind), cgoAllocsUnknown
	cproto, _ := (C.roc_protocol)(proto), cgoAllocsUnknown
	caddress, _ := address.PassRef()
	__ret := C.roc_receiver_bind(creceiver, ckind, cproto, caddress)
	__v := (int32)(__ret)
	return __v
}

// receiverRead function as declared in roc/receiver.h:180
func receiverRead(receiver *Receiver, frame *Frame) int32 {
	creceiver, _ := (*C.roc_receiver)(unsafe.Pointer(receiver)), cgoAllocsUnknown
	cframe, _ := frame.PassRef()
	__ret := C.roc_receiver_read(creceiver, cframe)
	__v := (int32)(__ret)
	return __v
}

// receiverClose function as declared in roc/receiver.h:195
func receiverClose(receiver *Receiver) int32 {
	creceiver, _ := (*C.roc_receiver)(unsafe.Pointer(receiver)), cgoAllocsUnknown
	__ret := C.roc_receiver_close(creceiver)
	__v := (int32)(__ret)
	return __v
}

// senderOpen function as declared in roc/sender.h:111
func senderOpen(context *Context, config *SenderConfig) *Sender {
	ccontext, _ := (*C.roc_context)(unsafe.Pointer(context)), cgoAllocsUnknown
	cconfig, _ := config.PassRef()
	__ret := C.roc_sender_open(ccontext, cconfig)
	__v := *(**Sender)(unsafe.Pointer(&__ret))
	return __v
}

// senderBind function as declared in roc/sender.h:134
func senderBind(sender *Sender, address *Address) int32 {
	csender, _ := (*C.roc_sender)(unsafe.Pointer(sender)), cgoAllocsUnknown
	caddress, _ := address.PassRef()
	__ret := C.roc_sender_bind(csender, caddress)
	__v := (int32)(__ret)
	return __v
}

// senderConnect function as declared in roc/sender.h:153
func senderConnect(sender *Sender, kind PortType, proto Protocol, address *Address) int32 {
	csender, _ := (*C.roc_sender)(unsafe.Pointer(sender)), cgoAllocsUnknown
	ckind, _ := (C.roc_port_type)(kind), cgoAllocsUnknown
	cproto, _ := (C.roc_protocol)(proto), cgoAllocsUnknown
	caddress, _ := address.PassRef()
	__ret := C.roc_sender_connect(csender, ckind, cproto, caddress)
	__v := (int32)(__ret)
	return __v
}

// senderWrite function as declared in roc/sender.h:177
func senderWrite(sender *Sender, frame *Frame) int32 {
	csender, _ := (*C.roc_sender)(unsafe.Pointer(sender)), cgoAllocsUnknown
	cframe, _ := frame.PassRef()
	__ret := C.roc_sender_write(csender, cframe)
	__v := (int32)(__ret)
	return __v
}

// senderClose function as declared in roc/sender.h:192
func senderClose(sender *Sender) int32 {
	csender, _ := (*C.roc_sender)(unsafe.Pointer(sender)), cgoAllocsUnknown
	__ret := C.roc_sender_close(csender)
	__v := (int32)(__ret)
	return __v
}
